# require_relative './node'
# require_relative './node'


# require '/home/daniel/ruby_projects/binary_search_tree/lib/node.rb'
#can't seem to work.

class Node
    attr_accessor :data, :right, :left

    def initialize(data)
        @data = data
        @right = nil
        @left = nil
    end
end


class Tree
    attr_accessor :array, :root

    def initialize(array)
        @array = array
        @root = build_tree(array)
    end
    
    def build_tree(array)
        if array.empty?
            return nil
        end
        #find middle index
        mid = array.length.div(2)

        #make the middle element of the root
        root = Node.new(array[mid])

        #left subtree of root has all values < array[mid]
        root.left = build_tree(array.slice(0,mid))

        #right
        root.right = build_tree(array.slice(mid + 1, array.length))
        return root
    end

    def pretty_print(node = @root, prefix = '', is_left = true)
        return if node.nil?
        pretty_print(node.right, "#{prefix}#{is_left ? '│   ' : '    '}", false) if node.right
        puts "#{prefix}#{is_left ? '└── ' : '┌── '}#{node.data}"
        pretty_print(node.left, "#{prefix}#{is_left ? '    ' : '│   '}", true) if node.left
    end

    def insert(data, root = @root)
        return root.left = Node.new(data) if data <= root.data && root.left.nil?
        return root.right = Node.new(data) if data > root.data && root.right.nil?
        if data <= root.data
            insert(data, root.left)
        elsif data > root.data
            insert(data, root.right)
        end
    end

    def delete(data, root = @root)
        if root == nil
            return root
        end
        if data < root.data
            root.left = delete(data, root.left)
        elsif data > root.data
            root.right = delete(data, root.right)
        else
            if root.left.nil?
                temp = root.right
                root = nil
                return temp
            elsif root.right.nil?
                temp = root.left
                root = nil
                return temp
            end
        end
        return root
    end 

    def find(data, root = @root)
        if root == nil
            return root
        elsif root.data == data
            return root
        elsif data < root.data
            root = find(data, root.left)
        elsif data > root.data
            root = find(data, root.right)
        else
            if root.left.nil?
                temp = root
                return temp
            elsif root.right.nil?
                temp = root
                return temp
            end
        end
        return root
    end
end

new_tree = Tree.new([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
new_tree.pretty_print
new_tree.delete(0)
new_tree.pretty_print
